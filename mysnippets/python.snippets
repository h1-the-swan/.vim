snippet timestamp "A formatted string with the current timestamp" 
'{:%Y-%m-%d %H:%M:%S}'.format(datetime.now())
endsnippet

snippet argparse "set up argument parser using argparse library" b
import argparse
parser = argparse.ArgumentParser(description="${1:TODO: description}")
parser.add_argument("${2:}", help="${3:TODO: help text}")
args = parser.parse_args()
endsnippet

snippet flush "flush stdout" b
sys.stdout.flush()
endsnippet

snippet logger "Set up a basic logger" b
import logging
logging.basicConfig(format='%(asctime)s %(name)s.%(lineno)d %(levelname)s : %(message)s',
        datefmt="%H:%M:%S",
        level=logging.INFO)
logger = logging.getLogger(__name__)
endsnippet

snippet boilerplate "boilerplate code to start out a script" 
# -*- coding: utf-8 -*-

DESCRIPTION = """${1:TODO: description}"""

import sys, os, time
from pathlib import Path
from datetime import datetime
from timeit import default_timer as timer
try:
    from humanfriendly import format_timespan
except ImportError:
    def format_timespan(seconds):
        return "{:.2f} seconds".format(seconds)

import logging
logging.basicConfig(format='%(asctime)s %(name)s.%(lineno)d %(levelname)s : %(message)s',
        datefmt="%H:%M:%S",
        level=logging.INFO)
# logger = logging.getLogger(__name__)
logger = logging.getLogger('__main__').getChild(__name__)

def main(args):
    pass

if __name__ == "__main__":
    total_start = timer()
    logger.info(" ".join(sys.argv))
    logger.info( '{:%Y-%m-%d %H:%M:%S}'.format(datetime.now()) )
    import argparse
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument("--debug", action='store_true', help="output debugging info")
    global args
    args = parser.parse_args()
    if args.debug:
        logger.setLevel(logging.DEBUG)
        logger.debug('debug mode is on')
    else:
        logger.setLevel(logging.INFO)
    main(args)
    total_end = timer()
    logger.info('all finished. total time: {}'.format(format_timespan(total_end-total_start)))
endsnippet
