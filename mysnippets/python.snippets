snippet timestamp "A formatted string with the current timestamp" 
'{:%Y-%m-%d %H:%M:%S}'.format(datetime.now())
endsnippet

snippet argparse "set up argument parser using argparse library" b
import argparse
parser = argparse.ArgumentParser(description="${1:TODO: description}")
parser.add_argument("${2:}", help="${3:TODO: help text}")
args = parser.parse_args()
endsnippet

snippet flush "flush stdout" b
sys.stdout.flush()
endsnippet

snippet logger "Set up a basic logger" b
import logging
logging.basicConfig(format='%(asctime)s %(name)s.%(lineno)d %(levelname)s : %(message)s',
        datefmt="%H:%M:%S",
        level=logging.INFO)
logger = logging.getLogger(__name__)
endsnippet

snippet boilerplate "boilerplate code to start out a script" 
import sys, os, time
from datetime import datetime

import logging
logging.basicConfig(format='%(asctime)s %(name)s.%(lineno)d %(levelname)s : %(message)s',
        datefmt="%H:%M:%S",
        level=logging.INFO)
logger = logging.getLogger('__main__').getChild(__name__)

def main():
    pass

if __name__ == "__main__":
    total_start = time.time()
    logger = logging.getLogger(__name__)
    logger.info(" ".join(sys.argv))
    logger.info( '{:%Y-%m-%d %H:%M:%S}'.format(datetime.now()) )
    import argparse
    parser = argparse.ArgumentParser(description="${1:TODO: description}")
    parser.add_argument("--debug", action='store_true', help="output debugging info")
    global args
    args = parser.parse_args()
    if args.debug:
        logger.setLevel(logging.DEBUG)
        logger.debug('debug mode is on')
    else:
        logger.setLevel(logging.INFO)
    main()
    total_end = time.time()
    logger.info('all finished. total time: {:.2f} seconds'.format(total_end-total_start))
endsnippet
